# P6Spy
# implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
# https://velog.io/@cvcvcx9/p6spy%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%BF%BC%EB%A6%AC-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EB%A1%9C%EA%B7%B8

spring:
  datasource:
    p6spy:
      enabled: false
    url: jdbc:h2:tcp://localhost/~/test
    username: sa
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      naming:
#        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        physical-strategy: hellojpa.config.UpperCaseNamingStrategy
      ddl-auto: create # none update create create-drop validate
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        highlight_sql: true
        generate_statistics: true
        dialect: org.hibernate.dialect.H2Dialect
#        dialect: org.hibernate.dialect.OracleDialect
#        dialect: org.hibernate.dialect.MySQL57Dialect
#        dialect: org.hibernate.dialect.PostgreSQLDialect
#        dialect: org.hibernate.dialect.SQLServer2012Dialect


# =========================
# 📋 MyBatis 설정
# =========================
mybatis:
  type-aliases-package: hello.itemservice.domain   # MyBatis XML에서 사용할 타입 별칭 패키지의 기본 경로를 설정해주어 Class명만 지정해주면 됨
  configuration:
    map-underscore-to-camel-case: true             # DB의 언더스코어(_)를 카멜 케이스로 자동 매핑


# =========================
# 🔍 로깅 설정 (SQL 및 트랜잭션 추적)
# =========================
logging:
  level:
    # ▶️ Spring JDBC 및 트랜잭션 로깅
    org.springframework.jdbc: DEBUG                                         # JDBC 관련 디버깅 정보 출력 ex) DEBUG: Executing SQL statement [SELECT * FROM users WHERE id=?]
    org.springframework.jdbc.datasource.DataSourceTransactionManager: DEBUG # 데이터소스 트랜잭션 관리자 로깅 ex) DEBUG: Began JDBC transaction on Connection [conn1]
    org.springframework.test.context.transaction: TRACE                     # 테스트 환경의 트랜잭션 동작 추적 ex) TRACE: Began transaction (transaction manager [JpaTransactionManager])
    org.springframework.transaction.interceptor: TRACE                      # 트랜잭션 인터셉터의 상세 동작 로깅 ex) TRACE: Getting transaction for [com.example.service.MyService.saveData]
    org.springframework.orm.jpa.JpaTransactionManager: DEBUG                # JPA 트랜잭션 관리자 로깅 ex) DEBUG: Committing JPA transaction on EntityManager [em1]

    # ▶️ MyBatis Repository 로깅
    hello.itemservice.repository.mybatis: TRACE                   # MyBatis Repository의 SQL 실행 및 처리 과정 로깅 ex) TRACE: Querying MyBatis mapper for method [selectUserById]

    # ▶️ Hibernate SQL 및 파라미터 바인딩 추적 (P6Spy로 대체가능 개발환경에서만)
    org.hibernate.SQL: DEBUG                                      # SQL 쿼리출력 ex) DEBUG: select * from users where id=?
    org.hibernate.orm.jdbc.bind: TRACE                            # (스프링부트 3.x버전)SQL 파라미터 바인딩 추적(JPA가 최종JDBC 단계로 진입한 상태에서) ex) TRACE [org.hibernate.orm.jdbc.bind] - binding parameter [1] = 'apple' (VARCHAR)
#    org.hibernate.orm.jdbc.extract: TRACE                         # JDBC 결과 추출 로깅 (동작안하는데 ㅠㅠ)
    org.hibernate.resource.transaction: DEBUG                     # Hibernate의 트랜잭션 리소스 관리 추적 ex) DEBUG: Initiating transaction after acquiring JDBC connection
    org.hibernate.type: TRACE
#    org.hibernate.type.descriptor.sql: TRACE                      # (스프링부트 2.x버전)SQL 파라미터 바인딩 과정 상세 로깅 (전반적인 로깅)             ex) TRACE [org.hibernate.type.descriptor.sql] - Binding parameter [1] as [VARCHAR] - [apple]
#    org.hibernate.type.descriptor.sql.BasicBinder: TRACE          # (스프링부트 2.x버전)SQL 파라미터 구체적인 값과 타입 로깅 (구체적이고 협소한 로깅) ex) TRACE [org.hibernate.type.descriptor.sql.BasicBinder] - binding parameter [1] -> [apple] (VARCHAR)
